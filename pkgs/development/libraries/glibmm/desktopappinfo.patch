diff --git a/configure.ac b/configure.ac
index 37f61a85..e9bd8499 100644
--- a/configure.ac
+++ b/configure.ac
@@ -53,6 +53,26 @@ AS_CASE([$host_os], [mingw*], [glibmm_host_windows=yes], [glibmm_host_windows=no
 AC_MSG_RESULT([$glibmm_host_windows])
 AM_CONDITIONAL([HOST_WINDOWS_NATIVE], [test "x$glibmm_host_windows" = xyes])
 
+# This test for Mac OS is copied from glib. If the result of glib's test
+# is ever made available outside glib, use glib's result instead of this test.
+# glib: https://bugzilla.gnome.org/show_bug.cgi?id=780309
+# glibmm: https://bugzilla.gnome.org/show_bug.cgi?id=781947
+glibmm_have_cocoa=no
+AC_MSG_CHECKING([for Mac OS X Cocoa support])
+AC_PREPROC_IFELSE([AC_LANG_SOURCE([[
+#include <Cocoa/Cocoa.h>
+#ifdef GNUSTEP_BASE_VERSION
+#error "Detected GNUstep, not Cocoa"
+#endif
+]])],[glibmm_have_cocoa=yes],[])
+
+AC_MSG_RESULT([$glibmm_have_cocoa])
+AM_CONDITIONAL(OS_COCOA, [test "$glibmm_have_cocoa" = "yes"])
+AS_IF([test "$glibmm_have_cocoa" = "yes"],
+[
+  AC_DEFINE([GLIBMM_OS_COCOA], [1], [Define only on Mac OS, COCOA])
+])
+
 # TODO: This makes no sense. --danielk
 AS_IF([test "x$enable_static" = xyes],
 [
diff --git a/gio/src/desktopappinfo.hg b/gio/src/desktopappinfo.hg
index 916830ef..d9c97e07 100644
--- a/gio/src/desktopappinfo.hg
+++ b/gio/src/desktopappinfo.hg
@@ -30,6 +30,9 @@ _PINCLUDE(glibmm/private/object_p.h)
 #define GLIB_DISABLE_DEPRECATION_WARNINGS 1
 #m4 _POP()
 
+// This file is not used on Windows and Mac OS Cocoa
+_GMMPROC_WRAP_CONDITIONALLY(if !defined(G_OS_WIN32) && !defined(GLIBMM_OS_COCOA))
+
 namespace Glib
 {
 
@@ -51,7 +54,6 @@ class DesktopAppInfo
 {
   _CLASS_GOBJECT(DesktopAppInfo, GDesktopAppInfo, G_DESKTOP_APP_INFO, Glib::Object, GObject)
   _IMPLEMENTS_INTERFACE(AppInfo)
-  _GTKMMPROC_WIN32_NO_WRAP
 
 public:
   // TODO: should use _WRAP_CREATE(), but these functions do more than just call
